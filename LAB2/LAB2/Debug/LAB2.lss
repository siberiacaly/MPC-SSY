
LAB2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009e  00800200  0000038a  0000041e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000038a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080029e  0080029e  000004bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000191f  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014c0  00000000  00000000  00001ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000632  00000000  00000000  0000337b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  000039b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a2d  00000000  00000000  00003ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000328  00000000  00000000  0000450d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00004835  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
   2:	00 00       	nop
   4:	b6 c0       	rjmp	.+364    	; 0x172 <__bad_interrupt>
   6:	00 00       	nop
   8:	b4 c0       	rjmp	.+360    	; 0x172 <__bad_interrupt>
   a:	00 00       	nop
   c:	b2 c0       	rjmp	.+356    	; 0x172 <__bad_interrupt>
   e:	00 00       	nop
  10:	b0 c0       	rjmp	.+352    	; 0x172 <__bad_interrupt>
  12:	00 00       	nop
  14:	ae c0       	rjmp	.+348    	; 0x172 <__bad_interrupt>
  16:	00 00       	nop
  18:	21 c1       	rjmp	.+578    	; 0x25c <__vector_6>
  1a:	00 00       	nop
  1c:	aa c0       	rjmp	.+340    	; 0x172 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a8 c0       	rjmp	.+336    	; 0x172 <__bad_interrupt>
  22:	00 00       	nop
  24:	a6 c0       	rjmp	.+332    	; 0x172 <__bad_interrupt>
  26:	00 00       	nop
  28:	a4 c0       	rjmp	.+328    	; 0x172 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	a2 c0       	rjmp	.+324    	; 0x172 <__bad_interrupt>
  2e:	00 00       	nop
  30:	a0 c0       	rjmp	.+320    	; 0x172 <__bad_interrupt>
  32:	00 00       	nop
  34:	9e c0       	rjmp	.+316    	; 0x172 <__bad_interrupt>
  36:	00 00       	nop
  38:	9c c0       	rjmp	.+312    	; 0x172 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	9a c0       	rjmp	.+308    	; 0x172 <__bad_interrupt>
  3e:	00 00       	nop
  40:	98 c0       	rjmp	.+304    	; 0x172 <__bad_interrupt>
  42:	00 00       	nop
  44:	96 c0       	rjmp	.+300    	; 0x172 <__bad_interrupt>
  46:	00 00       	nop
  48:	94 c0       	rjmp	.+296    	; 0x172 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	92 c0       	rjmp	.+292    	; 0x172 <__bad_interrupt>
  4e:	00 00       	nop
  50:	90 c0       	rjmp	.+288    	; 0x172 <__bad_interrupt>
  52:	00 00       	nop
  54:	8e c0       	rjmp	.+284    	; 0x172 <__bad_interrupt>
  56:	00 00       	nop
  58:	8c c0       	rjmp	.+280    	; 0x172 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	8a c0       	rjmp	.+276    	; 0x172 <__bad_interrupt>
  5e:	00 00       	nop
  60:	88 c0       	rjmp	.+272    	; 0x172 <__bad_interrupt>
  62:	00 00       	nop
  64:	86 c0       	rjmp	.+268    	; 0x172 <__bad_interrupt>
  66:	00 00       	nop
  68:	84 c0       	rjmp	.+264    	; 0x172 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	82 c0       	rjmp	.+260    	; 0x172 <__bad_interrupt>
  6e:	00 00       	nop
  70:	80 c0       	rjmp	.+256    	; 0x172 <__bad_interrupt>
  72:	00 00       	nop
  74:	7e c0       	rjmp	.+252    	; 0x172 <__bad_interrupt>
  76:	00 00       	nop
  78:	7c c0       	rjmp	.+248    	; 0x172 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	7a c0       	rjmp	.+244    	; 0x172 <__bad_interrupt>
  7e:	00 00       	nop
  80:	78 c0       	rjmp	.+240    	; 0x172 <__bad_interrupt>
  82:	00 00       	nop
  84:	76 c0       	rjmp	.+236    	; 0x172 <__bad_interrupt>
  86:	00 00       	nop
  88:	74 c0       	rjmp	.+232    	; 0x172 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	72 c0       	rjmp	.+228    	; 0x172 <__bad_interrupt>
  8e:	00 00       	nop
  90:	a4 c0       	rjmp	.+328    	; 0x1da <__vector_36>
  92:	00 00       	nop
  94:	6e c0       	rjmp	.+220    	; 0x172 <__bad_interrupt>
  96:	00 00       	nop
  98:	6c c0       	rjmp	.+216    	; 0x172 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	6a c0       	rjmp	.+212    	; 0x172 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	68 c0       	rjmp	.+208    	; 0x172 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	66 c0       	rjmp	.+204    	; 0x172 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	64 c0       	rjmp	.+200    	; 0x172 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	62 c0       	rjmp	.+196    	; 0x172 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	60 c0       	rjmp	.+192    	; 0x172 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	5e c0       	rjmp	.+188    	; 0x172 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	5c c0       	rjmp	.+184    	; 0x172 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	5a c0       	rjmp	.+180    	; 0x172 <__bad_interrupt>
  be:	00 00       	nop
  c0:	58 c0       	rjmp	.+176    	; 0x172 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	56 c0       	rjmp	.+172    	; 0x172 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	54 c0       	rjmp	.+168    	; 0x172 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	52 c0       	rjmp	.+164    	; 0x172 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	50 c0       	rjmp	.+160    	; 0x172 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	4e c0       	rjmp	.+156    	; 0x172 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	4c c0       	rjmp	.+152    	; 0x172 <__bad_interrupt>
  da:	00 00       	nop
  dc:	4a c0       	rjmp	.+148    	; 0x172 <__bad_interrupt>
  de:	00 00       	nop
  e0:	48 c0       	rjmp	.+144    	; 0x172 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	46 c0       	rjmp	.+140    	; 0x172 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	44 c0       	rjmp	.+136    	; 0x172 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	42 c0       	rjmp	.+132    	; 0x172 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	40 c0       	rjmp	.+128    	; 0x172 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	3e c0       	rjmp	.+124    	; 0x172 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	3c c0       	rjmp	.+120    	; 0x172 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	3a c0       	rjmp	.+116    	; 0x172 <__bad_interrupt>
  fe:	00 00       	nop
 100:	38 c0       	rjmp	.+112    	; 0x172 <__bad_interrupt>
 102:	00 00       	nop
 104:	36 c0       	rjmp	.+108    	; 0x172 <__bad_interrupt>
 106:	00 00       	nop
 108:	34 c0       	rjmp	.+104    	; 0x172 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	32 c0       	rjmp	.+100    	; 0x172 <__bad_interrupt>
 10e:	00 00       	nop
 110:	30 c0       	rjmp	.+96     	; 0x172 <__bad_interrupt>
 112:	00 00       	nop
 114:	2e c0       	rjmp	.+92     	; 0x172 <__bad_interrupt>
 116:	00 00       	nop
 118:	2c c0       	rjmp	.+88     	; 0x172 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	2a c0       	rjmp	.+84     	; 0x172 <__bad_interrupt>
 11e:	00 00       	nop
 120:	28 c0       	rjmp	.+80     	; 0x172 <__bad_interrupt>
 122:	00 00       	nop
 124:	26 c0       	rjmp	.+76     	; 0x172 <__bad_interrupt>
 126:	00 00       	nop
 128:	24 c0       	rjmp	.+72     	; 0x172 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	22 c0       	rjmp	.+68     	; 0x172 <__bad_interrupt>
 12e:	00 00       	nop
 130:	20 c0       	rjmp	.+64     	; 0x172 <__bad_interrupt>
	...

00000134 <__ctors_end>:
 134:	11 24       	eor	r1, r1
 136:	1f be       	out	0x3f, r1	; 63
 138:	cf ef       	ldi	r28, 0xFF	; 255
 13a:	d1 e8       	ldi	r29, 0x81	; 129
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	cd bf       	out	0x3d, r28	; 61
 140:	00 e0       	ldi	r16, 0x00	; 0
 142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
 144:	12 e0       	ldi	r17, 0x02	; 2
 146:	a0 e0       	ldi	r26, 0x00	; 0
 148:	b2 e0       	ldi	r27, 0x02	; 2
 14a:	ea e8       	ldi	r30, 0x8A	; 138
 14c:	f3 e0       	ldi	r31, 0x03	; 3
 14e:	00 e0       	ldi	r16, 0x00	; 0
 150:	0b bf       	out	0x3b, r16	; 59
 152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
 154:	07 90       	elpm	r0, Z+
 156:	0d 92       	st	X+, r0
 158:	ae 39       	cpi	r26, 0x9E	; 158
 15a:	b1 07       	cpc	r27, r17
 15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
 15e:	22 e0       	ldi	r18, 0x02	; 2
 160:	ae e9       	ldi	r26, 0x9E	; 158
 162:	b2 e0       	ldi	r27, 0x02	; 2
 164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
 166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
 168:	a0 3a       	cpi	r26, 0xA0	; 160
 16a:	b2 07       	cpc	r27, r18
 16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
 16e:	c1 d0       	rcall	.+386    	; 0x2f2 <main>
 170:	0a c1       	rjmp	.+532    	; 0x386 <_exit>

00000172 <__bad_interrupt>:
 172:	46 cf       	rjmp	.-372    	; 0x0 <__vectors>

00000174 <UART_init>:
	if (BUTTON1_PRESSED) {
		UART_SendString("Button pressed\n"); // Pro diagnostiku
		_delay_ms(50);  // Debounce
		if (BUTTON1_PRESSED) {
			UART_SendChar('1');  // Odeslání znaku '1'
			while (BUTTON1_PRESSED);  // ?ekáme na uvoln?ní tla?ítka
 174:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
 178:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
 17c:	e9 ec       	ldi	r30, 0xC9	; 201
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	80 61       	ori	r24, 0x10	; 16
 184:	80 83       	st	Z, r24
 186:	80 81       	ld	r24, Z
 188:	88 60       	ori	r24, 0x08	; 8
 18a:	80 83       	st	Z, r24
 18c:	80 81       	ld	r24, Z
 18e:	80 68       	ori	r24, 0x80	; 128
 190:	80 83       	st	Z, r24
 192:	ea ec       	ldi	r30, 0xCA	; 202
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	84 60       	ori	r24, 0x04	; 4
 19a:	80 83       	st	Z, r24
 19c:	80 81       	ld	r24, Z
 19e:	82 60       	ori	r24, 0x02	; 2
 1a0:	80 83       	st	Z, r24
 1a2:	78 94       	sei
 1a4:	08 95       	ret

000001a6 <UART_SendChar>:
 1a6:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 1aa:	95 ff       	sbrs	r25, 5
 1ac:	fc cf       	rjmp	.-8      	; 0x1a6 <UART_SendChar>
 1ae:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 1b2:	08 95       	ret

000001b4 <UART_SendString>:
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	ec 01       	movw	r28, r24
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <UART_SendString+0xc>
 1bc:	f4 df       	rcall	.-24     	; 0x1a6 <UART_SendChar>
 1be:	21 96       	adiw	r28, 0x01	; 1
 1c0:	88 81       	ld	r24, Y
 1c2:	81 11       	cpse	r24, r1
 1c4:	fb cf       	rjmp	.-10     	; 0x1bc <UART_SendString+0x8>
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <UART_GetChar>:
 1cc:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 1d0:	88 23       	and	r24, r24
 1d2:	e4 f7       	brge	.-8      	; 0x1cc <UART_GetChar>
 1d4:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 1d8:	08 95       	ret

000001da <__vector_36>:
 1da:	1f 92       	push	r1
 1dc:	0f 92       	push	r0
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	0f 92       	push	r0
 1e2:	11 24       	eor	r1, r1
 1e4:	8f 93       	push	r24
 1e6:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 1ea:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <receivedChar>
 1ee:	8f 91       	pop	r24
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <blinkLED2>:
 1fa:	20 e0       	ldi	r18, 0x00	; 0
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	1a c0       	rjmp	.+52     	; 0x234 <blinkLED2+0x3a>
 200:	85 b1       	in	r24, 0x05	; 5
 202:	8f 7b       	andi	r24, 0xBF	; 191
 204:	85 b9       	out	0x05, r24	; 5
 206:	4f ef       	ldi	r20, 0xFF	; 255
 208:	84 e3       	ldi	r24, 0x34	; 52
 20a:	9c e0       	ldi	r25, 0x0C	; 12
 20c:	41 50       	subi	r20, 0x01	; 1
 20e:	80 40       	sbci	r24, 0x00	; 0
 210:	90 40       	sbci	r25, 0x00	; 0
 212:	e1 f7       	brne	.-8      	; 0x20c <blinkLED2+0x12>
 214:	00 c0       	rjmp	.+0      	; 0x216 <blinkLED2+0x1c>
 216:	00 00       	nop
 218:	85 b1       	in	r24, 0x05	; 5
 21a:	80 64       	ori	r24, 0x40	; 64
 21c:	85 b9       	out	0x05, r24	; 5
 21e:	4f ef       	ldi	r20, 0xFF	; 255
 220:	84 e3       	ldi	r24, 0x34	; 52
 222:	9c e0       	ldi	r25, 0x0C	; 12
 224:	41 50       	subi	r20, 0x01	; 1
 226:	80 40       	sbci	r24, 0x00	; 0
 228:	90 40       	sbci	r25, 0x00	; 0
 22a:	e1 f7       	brne	.-8      	; 0x224 <blinkLED2+0x2a>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <blinkLED2+0x34>
 22e:	00 00       	nop
 230:	2f 5f       	subi	r18, 0xFF	; 255
 232:	3f 4f       	sbci	r19, 0xFF	; 255
 234:	23 30       	cpi	r18, 0x03	; 3
 236:	31 05       	cpc	r19, r1
 238:	1c f3       	brlt	.-58     	; 0x200 <blinkLED2+0x6>
 23a:	08 95       	ret

0000023c <showMenu>:
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	92 e0       	ldi	r25, 0x02	; 2
 240:	b9 df       	rcall	.-142    	; 0x1b4 <UART_SendString>
 242:	88 e0       	ldi	r24, 0x08	; 8
 244:	92 e0       	ldi	r25, 0x02	; 2
 246:	b6 df       	rcall	.-148    	; 0x1b4 <UART_SendString>
 248:	82 e1       	ldi	r24, 0x12	; 18
 24a:	92 e0       	ldi	r25, 0x02	; 2
 24c:	b3 df       	rcall	.-154    	; 0x1b4 <UART_SendString>
 24e:	85 e2       	ldi	r24, 0x25	; 37
 250:	92 e0       	ldi	r25, 0x02	; 2
 252:	b0 df       	rcall	.-160    	; 0x1b4 <UART_SendString>
 254:	8a e3       	ldi	r24, 0x3A	; 58
 256:	92 e0       	ldi	r25, 0x02	; 2
 258:	ad cf       	rjmp	.-166    	; 0x1b4 <UART_SendString>
 25a:	08 95       	ret

0000025c <__vector_6>:
		}
	}
}

// Funkce pro zpracování p?eruení na tla?ítko
ISR(INT5_vect) {
 25c:	1f 92       	push	r1
 25e:	0f 92       	push	r0
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	0f 92       	push	r0
 264:	11 24       	eor	r1, r1
 266:	0b b6       	in	r0, 0x3b	; 59
 268:	0f 92       	push	r0
 26a:	2f 93       	push	r18
 26c:	3f 93       	push	r19
 26e:	4f 93       	push	r20
 270:	5f 93       	push	r21
 272:	6f 93       	push	r22
 274:	7f 93       	push	r23
 276:	8f 93       	push	r24
 278:	9f 93       	push	r25
 27a:	af 93       	push	r26
 27c:	bf 93       	push	r27
 27e:	ef 93       	push	r30
 280:	ff 93       	push	r31
	if (BUTTON1_PRESSED && !buttonPressed) {  // Pokud tla?ítko stisknuto a jet? nebylo odesláno
 282:	65 99       	sbic	0x0c, 5	; 12
 284:	0a c0       	rjmp	.+20     	; 0x29a <__vector_6+0x3e>
 286:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <__data_end>
 28a:	81 11       	cpse	r24, r1
 28c:	06 c0       	rjmp	.+12     	; 0x29a <__vector_6+0x3e>
		UART_SendChar('1'); // Po stisknutí tla?ítka se odele znak '1'
 28e:	81 e3       	ldi	r24, 0x31	; 49
 290:	8a df       	rcall	.-236    	; 0x1a6 <UART_SendChar>
		buttonPressed = 1;  // Nastavíme stav tla?ítka na "stisknuto"
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <__data_end>
 298:	07 c0       	rjmp	.+14     	; 0x2a8 <__vector_6+0x4c>
	}
	else if (!BUTTON1_PRESSED && buttonPressed) {  // Pokud tla?ítko uvoln?no a bylo stisknuto
 29a:	65 9b       	sbis	0x0c, 5	; 12
 29c:	05 c0       	rjmp	.+10     	; 0x2a8 <__vector_6+0x4c>
 29e:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <__data_end>
 2a2:	81 11       	cpse	r24, r1
		buttonPressed = 0;  // Resetujeme stav tla?ítka na "nebylo stisknuto"
 2a4:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <__data_end>
	}
	EIFR |= (1 << INTF5); // Vymazání p?eruovací flagu
 2a8:	8c b3       	in	r24, 0x1c	; 28
 2aa:	80 62       	ori	r24, 0x20	; 32
 2ac:	8c bb       	out	0x1c, r24	; 28
}
 2ae:	ff 91       	pop	r31
 2b0:	ef 91       	pop	r30
 2b2:	bf 91       	pop	r27
 2b4:	af 91       	pop	r26
 2b6:	9f 91       	pop	r25
 2b8:	8f 91       	pop	r24
 2ba:	7f 91       	pop	r23
 2bc:	6f 91       	pop	r22
 2be:	5f 91       	pop	r21
 2c0:	4f 91       	pop	r20
 2c2:	3f 91       	pop	r19
 2c4:	2f 91       	pop	r18
 2c6:	0f 90       	pop	r0
 2c8:	0b be       	out	0x3b, r0	; 59
 2ca:	0f 90       	pop	r0
 2cc:	0f be       	out	0x3f, r0	; 63
 2ce:	0f 90       	pop	r0
 2d0:	1f 90       	pop	r1
 2d2:	18 95       	reti

000002d4 <button_interrupt_init>:



// Funkce pro inicializaci p?eruení na PE5
void button_interrupt_init(void) {
    sbi(PORTE, 5); // Aktivace interního pull-up odporu na PE5
 2d4:	8e b1       	in	r24, 0x0e	; 14
 2d6:	80 62       	ori	r24, 0x20	; 32
 2d8:	8e b9       	out	0x0e, r24	; 14
    cbi(DDRE, 5);  // Nastavení PE5 jako vstup
 2da:	8d b1       	in	r24, 0x0d	; 13
 2dc:	8f 7d       	andi	r24, 0xDF	; 223
 2de:	8d b9       	out	0x0d, r24	; 13
    // Povolení p?eruení na PE5 (INT5)
    EICRB |= (1 << ISC50); // Zm?na stavu (tla?ítko stisknuto nebo uvoln?no)
 2e0:	ea e6       	ldi	r30, 0x6A	; 106
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	80 81       	ld	r24, Z
 2e6:	84 60       	ori	r24, 0x04	; 4
 2e8:	80 83       	st	Z, r24
    EIMSK |= (1 << INT5);  // Povolení p?eruení INT5
 2ea:	8d b3       	in	r24, 0x1d	; 29
 2ec:	80 62       	ori	r24, 0x20	; 32
 2ee:	8d bb       	out	0x1d, r24	; 29
 2f0:	08 95       	ret

000002f2 <main>:
}

int main(void) {
 2f2:	cf 93       	push	r28
    sbi(PORTE, 5);  // Aktivace interního pull-up odporu na PE5
 2f4:	8e b1       	in	r24, 0x0e	; 14
 2f6:	80 62       	ori	r24, 0x20	; 32
 2f8:	8e b9       	out	0x0e, r24	; 14
    cbi(DDRE, 5);   // Nastavení PE5 jako vstup
 2fa:	8d b1       	in	r24, 0x0d	; 13
 2fc:	8f 7d       	andi	r24, 0xDF	; 223
 2fe:	8d b9       	out	0x0d, r24	; 13

    UART_init(MYUBRR);
 300:	8c e0       	ldi	r24, 0x0C	; 12
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	37 df       	rcall	.-402    	; 0x174 <UART_init>
	button_interrupt_init();
 306:	e6 df       	rcall	.-52     	; 0x2d4 <button_interrupt_init>
 308:	8a e5       	ldi	r24, 0x5A	; 90
    UART_SendString("UART initialized. Starting program...\n");
 30a:	92 e0       	ldi	r25, 0x02	; 2
 30c:	53 df       	rcall	.-346    	; 0x1b4 <UART_SendString>
    showMenu();
 30e:	96 df       	rcall	.-212    	; 0x23c <showMenu>
 310:	78 94       	sei
    
	sei();  // Povolení globálních p?eruení
 312:	5c df       	rcall	.-328    	; 0x1cc <UART_GetChar>
	
    while (1) {
		        uint8_t choice = UART_GetChar();
 314:	c8 2f       	mov	r28, r24
 316:	88 23       	and	r24, r24
        if (choice) { // Jen pokud uivatel n?co zadal
 318:	e1 f3       	breq	.-8      	; 0x312 <main+0x20>
            UART_SendChar(choice);
 31a:	45 df       	rcall	.-374    	; 0x1a6 <UART_SendChar>
 31c:	8c e9       	ldi	r24, 0x9C	; 156
            UART_SendString("\n");
 31e:	92 e0       	ldi	r25, 0x02	; 2
 320:	49 df       	rcall	.-366    	; 0x1b4 <UART_SendString>
 322:	c1 33       	cpi	r28, 0x31	; 49
 324:	69 f0       	breq	.+26     	; 0x340 <main+0x4e>

            switch (choice) {
 326:	18 f4       	brcc	.+6      	; 0x32e <main+0x3c>
 328:	c0 33       	cpi	r28, 0x30	; 48
 32a:	31 f1       	breq	.+76     	; 0x378 <main+0x86>
 32c:	20 c0       	rjmp	.+64     	; 0x36e <main+0x7c>
 32e:	c2 33       	cpi	r28, 0x32	; 50
 330:	91 f0       	breq	.+36     	; 0x356 <main+0x64>
 332:	c3 33       	cpi	r28, 0x33	; 51
 334:	b9 f0       	breq	.+46     	; 0x364 <main+0x72>
 336:	1b c0       	rjmp	.+54     	; 0x36e <main+0x7c>
 338:	8c 2f       	mov	r24, r28
                case '0':
                    UART_SendString("Exiting...\n");
                    return 0;
                case '1':
                    for (char c = 'a'; c <= 'z'; c++) UART_SendChar(c);
 33a:	35 df       	rcall	.-406    	; 0x1a6 <UART_SendChar>
 33c:	cf 5f       	subi	r28, 0xFF	; 255
 33e:	01 c0       	rjmp	.+2      	; 0x342 <main+0x50>
 340:	c1 e6       	ldi	r28, 0x61	; 97
 342:	cb 37       	cpi	r28, 0x7B	; 123
 344:	c8 f3       	brcs	.-14     	; 0x338 <main+0x46>
                    UART_SendString("\n");
 346:	8c e9       	ldi	r24, 0x9C	; 156
 348:	92 e0       	ldi	r25, 0x02	; 2
 34a:	34 df       	rcall	.-408    	; 0x1b4 <UART_SendString>
 34c:	13 c0       	rjmp	.+38     	; 0x374 <main+0x82>
                    break;
 34e:	8c 2f       	mov	r24, r28
                case '2':
                    for (char c = 'A'; c <= 'Z'; c++) UART_SendChar(c);
 350:	2a df       	rcall	.-428    	; 0x1a6 <UART_SendChar>
 352:	cf 5f       	subi	r28, 0xFF	; 255
 354:	01 c0       	rjmp	.+2      	; 0x358 <main+0x66>
 356:	c1 e4       	ldi	r28, 0x41	; 65
 358:	cb 35       	cpi	r28, 0x5B	; 91
 35a:	c8 f3       	brcs	.-14     	; 0x34e <main+0x5c>
                    UART_SendString("\n");
 35c:	8c e9       	ldi	r24, 0x9C	; 156
 35e:	92 e0       	ldi	r25, 0x02	; 2
                    break;
 360:	29 df       	rcall	.-430    	; 0x1b4 <UART_SendString>
                case '3':
                    sbi(DDRB, 6);
 362:	08 c0       	rjmp	.+16     	; 0x374 <main+0x82>
 364:	84 b1       	in	r24, 0x04	; 4
                    blinkLED2();
 366:	80 64       	ori	r24, 0x40	; 64
 368:	84 b9       	out	0x04, r24	; 4
                    break;
 36a:	47 df       	rcall	.-370    	; 0x1fa <blinkLED2>
                default:
                    UART_SendString("Invalid choice!\n");
 36c:	03 c0       	rjmp	.+6      	; 0x374 <main+0x82>
 36e:	8d e8       	ldi	r24, 0x8D	; 141
 370:	92 e0       	ldi	r25, 0x02	; 2
 372:	20 df       	rcall	.-448    	; 0x1b4 <UART_SendString>
            }
            showMenu();
 374:	63 df       	rcall	.-314    	; 0x23c <showMenu>
 376:	cd cf       	rjmp	.-102    	; 0x312 <main+0x20>
 378:	81 e8       	ldi	r24, 0x81	; 129
            UART_SendChar(choice);
            UART_SendString("\n");

            switch (choice) {
                case '0':
                    UART_SendString("Exiting...\n");
 37a:	92 e0       	ldi	r25, 0x02	; 2
 37c:	1b df       	rcall	.-458    	; 0x1b4 <UART_SendString>
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	90 e0       	ldi	r25, 0x00	; 0
                    UART_SendString("Invalid choice!\n");
            }
            showMenu();
        }
    }
}
 382:	cf 91       	pop	r28
 384:	08 95       	ret

00000386 <_exit>:
 386:	f8 94       	cli

00000388 <__stop_program>:
 388:	ff cf       	rjmp	.-2      	; 0x388 <__stop_program>
